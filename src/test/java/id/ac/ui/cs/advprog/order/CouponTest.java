package id.ac.ui.cs.advprog.order;

import id.ac.ui.cs.advprog.order.enums.CouponType;
import id.ac.ui.cs.advprog.order.model.Coupon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CouponTest {

    //Happy Path
    @Test
    void testCreateCoupon() {
        Coupon coupon = new Coupon(CouponType.FIXED, 10.0, 5, 1);
        assertEquals("FIXED-1", coupon.getCode());
        assertEquals(CouponType.FIXED, coupon.getCouponType());
        assertEquals(10.0, coupon.getValue());
        assertEquals(5, coupon.getMaxUsage());
        assertEquals(0, coupon.getUsedCount());
    }

    @Test
    void testIncrementUsage() {
        Coupon coupon = new Coupon(CouponType.PERCENTAGE, 15.0, 3, 2);
        coupon.incrementUsage();
        assertEquals(1, coupon.getUsedCount());
    }

    @Test
    void testIsValid() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 2, 3);
        assertTrue(coupon.isValid());
    }

    @Test
    void testCodeAutoGeneratedFormat() {
        Coupon coupon1 = new Coupon(CouponType.FIXED, 10.0, 5, 1);
        Coupon coupon2 = new Coupon(CouponType.FIXED, 20.0, 5, 2);

        assertEquals("FIXED-1", coupon1.getCode());
        assertEquals("FIXED-2", coupon2.getCode());
    }



    //Unhappy Path

    @Test
    void testInvalidEnumParsing() {
        assertThrows(IllegalArgumentException.class, () -> {
            CouponType.valueOf("INVALID_ENUM");
        });
    }

    @Test
    void testCreateCouponWithNegativeValue() {
        Coupon coupon = new Coupon(CouponType.PERCENTAGE, -10.0, 3, 2);
        assertFalse(coupon.isValid());
    }

    @Test
    void testExceedMaxUsage() {
        Coupon coupon = new Coupon(CouponType.RANDOM, 10.0, 1, 2);
        coupon.incrementUsage();
        coupon.incrementUsage();
        assertFalse(coupon.isValid());
    }


}

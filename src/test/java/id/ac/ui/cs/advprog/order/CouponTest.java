package id.ac.ui.cs.advprog.order;

import id.ac.ui.cs.advprog.order.enums.CouponType;
import id.ac.ui.cs.advprog.order.model.Coupon;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

public class CouponTest {

    @Test
    void testCreateCoupon() {
        Coupon coupon = new Coupon(CouponType.FIXED, 10.0, 5);
        coupon.setStartDate(LocalDateTime.of(2025, 4, 10, 0, 0));
        coupon.setEndDate(LocalDateTime.of(2025, 5, 10, 0, 0));
        coupon.setDeletedAt(null);
        coupon.setCreatedAt(LocalDateTime.of(2025, 4, 1, 12, 0));
        coupon.setUpdatedAt(LocalDateTime.of(2025, 4, 5, 12, 0));
        coupon.setCreatedBy(UUID.randomUUID());

        assertTrue(coupon.getCode().matches("FIXED-[A-Z0-9]{3}"));
        assertEquals(CouponType.FIXED, coupon.getCouponType());
        assertEquals(10.0, coupon.getDiscountAmount());
        assertEquals(5, coupon.getMaxUsage());
        assertEquals(0, coupon.getCurrentUsage());

        assertEquals(LocalDateTime.of(2025, 4, 10, 0, 0), coupon.getStartDate());
        assertEquals(LocalDateTime.of(2025, 5, 10, 0, 0), coupon.getEndDate());
        assertNull(coupon.getDeletedAt());
        assertEquals(LocalDateTime.of(2025, 4, 1, 12, 0), coupon.getCreatedAt());
        assertEquals(LocalDateTime.of(2025, 4, 5, 12, 0), coupon.getUpdatedAt());
        assertNotNull(coupon.getCreatedBy());
    }


    @Test
    void testIncrementUsage() {
        Coupon coupon = new Coupon(CouponType.FIXED, 10.0, 5);
        coupon.incrementUsage();
        assertEquals(1, coupon.getCurrentUsage());
    }

    @Test
    void testIsValid() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 2);
        coupon.setStartDate(LocalDateTime.now().minusDays(1));
        coupon.setEndDate(LocalDateTime.now().plusDays(1));
        coupon.setDeletedAt(null);
        assertTrue(coupon.isValid());
    }

    @Test
    void testCodeAutoGeneratedFormat() {
        Coupon coupon1 = new Coupon(CouponType.FIXED, 10.0, 5);
        Coupon coupon2 = new Coupon(CouponType.FIXED, 20.0, 5);

        assertTrue(coupon1.getCode().matches("FIXED-[A-Z0-9]{3}"));
        assertTrue(coupon2.getCode().matches("FIXED-[A-Z0-9]{3}"));
        assertNotEquals(coupon1.getCode(), coupon2.getCode());
    }





    @Test
    void testInvalidEnumParsing() {
        assertThrows(IllegalArgumentException.class, () -> {
            CouponType.valueOf("INVALID_ENUM");
        });
    }

    @Test
    void testCreateCouponWithNegativeValue() {
        Coupon coupon = new Coupon(CouponType.PERCENTAGE, -10.0, 3);
        assertFalse(coupon.isValid());
    }

    @Test
    void testExceedMaxUsage() {
        Coupon coupon = new Coupon(CouponType.RANDOM, 10.0, 1);
        coupon.incrementUsage();
        coupon.incrementUsage();
        assertFalse(coupon.isValid());
    }
    @Test
    void testCouponValidWithinDateRange() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 3);
        coupon.setStartDate(LocalDateTime.now().minusDays(1));
        coupon.setEndDate(LocalDateTime.now().plusDays(1));
        assertTrue(coupon.isValid());
    }

    @Test
    void testCouponInvalidIfBeforeStartDate() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 3);
        coupon.setStartDate(LocalDateTime.now().plusDays(1));
        coupon.setEndDate(LocalDateTime.now().plusDays(3));
        assertFalse(coupon.isValid());
    }

    @Test
    void testCouponInvalidIfAfterEndDate() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 3);
        coupon.setStartDate(LocalDateTime.now().minusDays(3));
        coupon.setEndDate(LocalDateTime.now().minusDays(1));
        assertFalse(coupon.isValid());
    }

    @Test
    void testCouponInvalidIfDeleted() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 3);
        coupon.setDeletedAt(LocalDateTime.now());
        assertFalse(coupon.isValid());
    }

    @Test
    void testCouponValidIfAllConditionsMet() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 3);
        coupon.setStartDate(LocalDateTime.now().minusDays(1));
        coupon.setEndDate(LocalDateTime.now().plusDays(1));
        coupon.setDeletedAt(null);
        assertTrue(coupon.isValid());
    }

    @Test
    void testAutomaticFieldsOnCreation() {
        LocalDateTime beforeCreation = LocalDateTime.now();
        Coupon coupon = new Coupon(CouponType.FIXED, 25.0, 10);
        LocalDateTime afterCreation = LocalDateTime.now();

        // Auto-generated fields
        assertNotNull(coupon.getId(), "ID should be auto-generated");
        assertTrue(coupon.getCode().matches("FIXED-[A-Z0-9]{3}"), "Code should match FIXED-XXX format");
        assertEquals(0, coupon.getCurrentUsage(), "Current usage should be initialized to 0");
        assertNotNull(coupon.getCreatedAt(), "CreatedAt should be set on creation");

        // Auto-set startDate = createdAt
        assertNotNull(coupon.getStartDate(), "StartDate should be set automatically");
        assertFalse(coupon.getStartDate().isBefore(beforeCreation), "StartDate should not be before object creation");
        assertFalse(coupon.getStartDate().isAfter(afterCreation), "StartDate should not be after test timestamp");

        // Fields that should be null
        assertNull(coupon.getEndDate(), "EndDate should be null by default");
        assertNull(coupon.getDeletedAt(), "DeletedAt should be null by default");
        assertNull(coupon.getUpdatedAt(), "UpdatedAt should be null by default");
        assertNull(coupon.getCreatedBy(), "CreatedBy should be null by default");
    }


}

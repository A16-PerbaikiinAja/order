package id.ac.ui.cs.advprog.order.model;

import id.ac.ui.cs.advprog.order.enums.CouponType;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

public class CouponTest {

    @Test
    void testCreateCoupon() {
        Coupon coupon = new Coupon(CouponType.FIXED, 10.0, 5);
        coupon.setStart_date(LocalDateTime.of(2025, 4, 10, 0, 0));
        coupon.setEnd_date(LocalDateTime.of(2025, 5, 10, 0, 0));
        coupon.setDeleted_at(null);
        coupon.setCreated_at(LocalDateTime.of(2025, 4, 1, 12, 0));
        coupon.setUpdated_at(LocalDateTime.of(2025, 4, 5, 12, 0));

//        assertTrue(coupon.getCode().matches("FIXED-[A-Z0-9]{3}"));
        assertEquals(CouponType.FIXED, coupon.getCouponType());
        assertEquals(10.0, coupon.getDiscount_amount());
        assertEquals(5, coupon.getMax_usage());
        assertEquals(0, coupon.getCurrent_usage());

        assertEquals(LocalDateTime.of(2025, 4, 10, 0, 0), coupon.getStart_date());
        assertEquals(LocalDateTime.of(2025, 5, 10, 0, 0), coupon.getEnd_date());
        assertNull(coupon.getDeleted_at());
        assertEquals(LocalDateTime.of(2025, 4, 1, 12, 0), coupon.getCreated_at());
        assertEquals(LocalDateTime.of(2025, 4, 5, 12, 0), coupon.getUpdated_at());
    }


    @Test
    void testIncrementUsage() {
        Coupon coupon = new Coupon(CouponType.FIXED, 10.0, 5);
        coupon.incrementUsage();
        assertEquals(1, coupon.getCurrent_usage());
    }

    @Test
    void testIsValid() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 2);
        coupon.setStart_date(LocalDateTime.now().minusDays(1));
        coupon.setEnd_date(LocalDateTime.now().plusDays(1));
        coupon.setDeleted_at(null);
        assertTrue(coupon.isValid());
    }

//    @Test
//    void testCodeAutoGeneratedFormat() {
//        Coupon coupon1 = new Coupon(CouponType.FIXED, 10.0, 5);
//        Coupon coupon2 = new Coupon(CouponType.FIXED, 20.0, 5);
//
//        assertTrue(coupon1.getCode().matches("FIXED-[A-Z0-9]{3}"));
//        assertTrue(coupon2.getCode().matches("FIXED-[A-Z0-9]{3}"));
//        assertNotEquals(coupon1.getCode(), coupon2.getCode());
//    }





    @Test
    void testInvalidEnumParsing() {
        assertThrows(IllegalArgumentException.class, () -> {
            CouponType.valueOf("INVALID_ENUM");
        });
    }

    @Test
    void testCreateCouponWithNegativeValue() {
        Coupon coupon = new Coupon(CouponType.PERCENTAGE, -10.0, 3);
        assertFalse(coupon.isValid());
    }

    @Test
    void testExceedMax_usage() {
        Coupon coupon = new Coupon(CouponType.RANDOM, 10.0, 1);
        coupon.incrementUsage();
        coupon.incrementUsage();
        assertFalse(coupon.isValid());
    }
    @Test
    void testCouponValidWithinDateRange() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 3);
        coupon.setStart_date(LocalDateTime.now().minusDays(1));
        coupon.setEnd_date(LocalDateTime.now().plusDays(1));
        assertTrue(coupon.isValid());
    }

    @Test
    void testCouponInvalidIfBeforeStart_date() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 3);
        coupon.setStart_date(LocalDateTime.now().plusDays(1));
        coupon.setEnd_date(LocalDateTime.now().plusDays(3));
        assertFalse(coupon.isValid());
    }

    @Test
    void testCouponInvalidIfAfterEnd_date() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 3);
        coupon.setStart_date(LocalDateTime.now().minusDays(3));
        coupon.setEnd_date(LocalDateTime.now().minusDays(1));
        assertFalse(coupon.isValid());
    }

    @Test
    void testCouponInvalidIfDeleted() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 3);
        coupon.setDeleted_at(LocalDateTime.now());
        assertFalse(coupon.isValid());
    }

    @Test
    void testCouponValidIfAllConditionsMet() {
        Coupon coupon = new Coupon(CouponType.FIXED, 5.0, 3);
        coupon.setStart_date(LocalDateTime.now().minusDays(1));
        coupon.setEnd_date(LocalDateTime.now().plusDays(1));
        coupon.setDeleted_at(null);
        assertTrue(coupon.isValid());
    }

    @Test
    void testAutomaticFieldsOnCreation() {
        LocalDateTime beforeCreation = LocalDateTime.now();
        Coupon coupon = new Coupon(CouponType.FIXED, 25.0, 10);
        LocalDateTime afterCreation = LocalDateTime.now();

        // Auto-generated fields
//        assertNotNull(coupon.getId(), "ID should be auto-generated");
//        assertTrue(coupon.getCode().matches("FIXED-[A-Z0-9]{3}"), "Code should match FIXED-XXX format");
        assertEquals(0, coupon.getCurrent_usage(), "Current usage should be initialized to 0");
        assertNotNull(coupon.getCreated_at(), "Created_at should be set on creation");

        // Auto-set startDate = createdAt
        assertNotNull(coupon.getStart_date(), "Start_date should be set automatically");
        assertFalse(coupon.getStart_date().isBefore(beforeCreation), "Start_date should not be before object creation");
        assertFalse(coupon.getStart_date().isAfter(afterCreation), "Start_date should not be after test timestamp");

        // Fields that should be null
        assertNull(coupon.getEnd_date(), "End_date should be null by default");
        assertNull(coupon.getDeleted_at(), "Deleted_at should be null by default");
        assertNull(coupon.getUpdated_at(), "Updated_at should be null by default");
    }


}
